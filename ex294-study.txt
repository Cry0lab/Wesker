Basic RHCSA Skills - Vids 3-11
	Essential Tools
		tar a file
			tar -cvf archive.tar file1 file2
		extract a tar
			tar -xvf archive.tar
	Operate Running Systems
		Interrupt Boot and Change Root Password
			Press e during boot
			Go to the end of the "linux" line and remove ro crash and add ro.break enforcing=0
			Start the system with CTRL+x
			Remount the root filesystem
				mount -o remount,rw /sysroot
			cd /sysroot
			passwd
			Enable SELinux relabeling
				touch /.autorelabel
			exit
		List active processes
			ps -ef
	Local Storage
		List current block devices and partitions
			lsblk
		Create a DOS partition
			fdisk /dev/device_name
			Show the help
				m
			print partition table
				p
			Create a DOS parition table
				o
			Create new primary partition
				n
			List partition types
				l
			Use the Linux LVM type
				8e
			Write the table to disk
				w
		Create a new LVM Logical Volume
			Create a physical volume
				pvcreate /dev/device_name
			list physical volumes
				pvs
			Create a volume group
				vgcreate vol_group /dev/device_name
			list volume groups
				vgs
			create logical volume
				lvcreate -L 1G<size goes here> -n new_lv vol_group
			list logical volumes
				lvs
		Create file system on the new lvs
			mkfs.ext4 /path/to/lv
		Mount the file system
			mount /path/to/lv /path/to/dir
		Mount it persistently
			list the UUID
				blkid
			add to /etc/fstab
				UUID=UUID_NUMBER /mount/point fs_type defaults 0 0
		Extend the Logical Volume
			Increase the underlying logical volume
				lvextend -L +500M /dev/vol_group/log_vol
			Unmount it
				umount /path/to/mount
			resize file system
				resize2fs /dev/vol_grp/log_vol
			Mount it again
				mount -a
			Check your work
				df -h
		Mount an nfs file system from Scarecrow
			yum install nfs-utils
			systemctl start rpcbind
			showmount -e SERVER_IP
			mount persistently
				SERVERIP:/mnt/nfs	/mnt/DIRECTORY	nfs	defaults 0 0
		Delete the LVM Logical Volume you just made
			Delete logical volume
				lvremore vol_group/new_lv
			Delete volume group
				vgremove vol_group
			Delete physical volume
				pvremove /dev/device_name
	Deploy-Configure-Maintain
		List all scheduled jobs
			atq
		Configure time service client with chrony
			yum install chrony
			systemctl enable --now chronyd
			vi /etc/chrony.conf and put in NTP server
			systemctl restart chronyd
	Users and Groups
		Create a new user
			useradd username
		Modify the user to add the wheel group
			usermod -aG wheel username
		Set the user password
			passwd username
		Set expiration on the user's password
			chage
		Delete the user
			userdel username
		Create a new group
			groupadd groupname
		Delete a group
			groupdel groupname
	Security
		Add a firewalld port rule for httpd
			firewall-cmd --add-service=http --permanent
			firewall-cmd --add-port=443 --permanent
			firewall-cmd --add-port=8080 --permanent
			firewall-cmd --reload
			firewall-cmd --list-all
		SELinux
			See what mode you're in
				getenforce
			Set mode to permissive or enforcing
				setenforce 0 | 1
			list booleans
				getsebool -a
			list SELinux contexts
				semanage fcontext -l
			view context on file or process
				ls -Z | ps -axZ
			restore default contexts
				restorecon -R /directory

Understand Core Components of Ansible - Vids 12-17
	Inventories
		Create an inventory with 2 seperate groups, dbservers and webservers, and one ungrouped host
			vim /etc/ansible/hosts
				server1.cryolab.tech

				[webservers]
				server2.cryolab.tech
				server3.cryolab.tech

				[dbservers]
				server[4:6].cryolab.tech
	Config Files
		list the currect ansible configs
			ansible-config list
			ansible-config view

Install and Configure an Ansible Control Node - Vids 18-20
	Create a new host file and make it the default for ansible in /etc/ansible/inventory/inv.ini; add the roles path to be /etc/ansible/roles
		vim /etc/ansible/ansible.cfg
			[defaults]
			inventory = /etc/ansible/inventory/inv.ini
			roles_path = /etc/ansible/roles
	Create an inline variable in the host file for scarface.cryolab.tech to also be scarface
		scarface ansible_host=scarface.cryolab.tech
	Create a host_vars file to hold the variable instead
		vim /etc/ansible/inventory/host_vars/scarface
			scarface ansible_host=scarface.cryolab.tech

Script Administration Tasks - Vids 23-24
	Use an adhoc ansible command to ping the endpoint
		ansible scarface -m ping
	Use an adhoc command to copy a file to the Node
		ansible scarface -m copy -a "src=/file dest=/tmp"
	Use an adhoc command to ls the root directory
		ansible scarface -a "ls /"
	Write a bash script that uses adhoc commands to installs and enables httpd, ls the root directory, and pings the host
		#!/bin/bash

		ansible scarface -b -m yum -a "name=httpd state=latest"
		ansible scarface -b -m service -a "name=httpd state=started enabled=yes"

		ansible scarface -b -a "ls /"

		ansible scarface -m ping

Create Ansible Plays and Playbooks - Vids 25-29
	Create a playbook that creates a file and displays a debug message that shows the output of that creation. 
	Then, add a line to the file you created with the UID of the file and the gid of the file.
		---
		- hosts: scarface
		  tasks:
		  	- name: create a file
			  file:
			  	path: /tmp/testFile
				state: touch
			  register: var
			- name: display debug message
			  debug: msg="Register output it {{ var }}"
			- name: edit file
			  lineinfile:
			  	path: /tmp/testFile
				line: "The uid is {{ var.uid}} and the gid is {{ var.gid }}"
	
	Create a playbook that installs httpd, then replace the line with ServerAdmin to be redhood, making sure to make a backup. 
	If it works, use a handler to restart apache
		---
		- hosts: scarface
		  tasks:
		  	- name: install httpd
			  yum:
			  	name: httpd
				state: latest
			  service:
			  	name: httpd
				state: started
				enabled: yes
			- name update httpd.conf
			  replace:
			  	path: /etc/httpd/conf/httpd.conf
				regexp: '^ServerAdmin.*$'
				replace: 'ServerAdmin redhood@localhost'
				backup: yes
			  notify: "restart web server"
		  handlers:
		  	- name: "restart apache"
			  service:
			  	name: httpd
				state: restarted
			  listen: "restart web server"
	
	Create a playbook that targets all servers and copies a file, but use a when statement so it only runs if the hostname is scarface
		---
		- hosts: all
		  become: true
		  tasks:
		  	- name: copy file
			  copy:
			  	src: /path/to/file
				dest: /path/to/file
			  when: ansible_hostname == "scarface"
	
	Create a playbook that uses a loop to creates 3 users into the wheel group
		---
		- hosts: scarface
		  become: true
		  tasks:
		  	- name: create a list of users
			  user:
			  	name: "{{ item }}
				state: present
				group: wheel
			  loop:
			  	- name1
				- name2
				- name3
	
	Create a playbook that copies a non-existent file from the target host, but ignores errors
		---
		- hosts: scarface
		  become: true
		  tasks:
			- name: copy fake file
			  fetch:
				src: /tmp/fakeFile
				dest: /tmp
			  ignore_errors: true

	Create a playbook that copies a non-existent file from the target host, but use a block to display a custom error message with the hostname of the host that failed. Include a message that always displays when the playbook is finished.
		---
		- hosts: scarface
		  become: true
		  tasks:
			- name: fetch fake file
			  block:
				- fetch:
					src: /tmp/fakeFile
					dest: /tmp
			  rescue:
				- debug:
					msg: "The file doesn't exist on {{ ansible_hostname }}."
			  always:
				- debug:
					msg: "Playbook is finished!"

	Create a playbook that does the following:
		On the webservers:
		1. Installs apache
		2. Creates users will and myles in the apache group using a loop
		3. Create an index.html on the webservers using a simple template and 644 permissions ("This is the index.html on {{ ansible_hostname }})
		4. Start and enable apache, reloading the daemon
		On the dbservers
		1. Install postgresql
		2. Initialize the cluster (/usr/bin/postgresql-setup --initdb)
		3. Creates users corey and aaron in the postgres group using a loop
		4. Start and enable postgresql
			---
			- hosts: webservers
			  become: true
			  tasks:
			  	- name: install apache
				  yum:
				  	name: httpd
					state: latest
				- name: create users for apache
				  user:
				  	name: {{ item }}
					groups: apache
				  loop:
				  	- will
					- myles
				- name: create index.html
				  template:
				  	src: /home/wesker/index.j2
					dest: /var/www/html/index.html
					owner: apache
					group: apache
					mode: 0644
				- name: start and enable httpd
				  systemd:
				  	name: httpd
					state: started
					daemon_reload: true
					enabled: true
			- hosts: dbservers
			  become: true
			  tasks:
			  	- name: install postgresql
				  yum:
				  	name: postgresql
					state: latest
				- name: Initialize dbservers
				  command: /usr/bin/postgresql-setup --initdb
				- name: Create users
				  user:
				  	name: {{ item }}
					group: postgres
				  loop:
				  	- corey
					- aaron
				- name: start and enable postgres
				  systemd:
				  	name: postgresql
					state: started
					enabled: true

Use Ansible Modules for System Adminstration Tasks - Vids 30-39
	Working with Yum
	Create a playbook that does the following:
	1. Installs multiple packages in the same playbook
	2. Install an rpm from a remote repo
	3. Install an rpm from a local file
	4. Remove the packages you just installed
	5. Add the epel repo
	6. remove the repo
		---
		- hosts: all
		  become: true
		  tasks:
		  	- name: Install multiple packages
			  yum:
			  	name: 
					- nmap
					- nfs-utils
				state: latest
			- name: install a repo from a remote repo
			  yum:
			  	name: http://website.com/path/to/rpm
				state: present
			- name: Install from a local file
			  yum:
			  	name: /path/to/rpm
				state: present
			- name: remove packages
			  yum:
			  name:
			  	- nmap
				- nfs-utils
			  state: absent
			- name: Add epel repo
			  yum_repository:
			  	name: epel
				description: EPEL YUM repo
				baseurl: https://a;slkdf;alksdjf
			- name: remove epel repo
			  yum_repository:
			  	name: epel
				file: epel
				state: absent

	Working with the firewall
	Create a playbook that does the following to the webservers:
	1. Add the http and https service to the firewall, immedaitely and permanantly to the public zone
	2. Add the ports 8080-8084
	3. Use a rich rule to forward port 443 to 8443
	4. Change the playbook to disable those rules
		---
		- hosts: webservers
		  become: true
		  tasks:
		  	- name: add http and https
			  firewalld:
			  	zone: public
				service: {{ item }}
				permanent: true
				immediate: true
				state: enabled
			  loop:
			  	- http
				- https
			- name: add 8080
			  firewalld:
			  	zone: public
				port: 8080-8084/tcp
				permanent: true
				immediate: true
				state: enabled
			- name: Forward port 443 to 8443
			  firewalld:
			  	zone: public
				rich_rule: rule family=ipv4 forward-port port=443 protocol=tcp to-port=8443
				permanent: true
				immediate: true
				state: enabled

	Working with storage devices
	Create a playbook that does the following to scarface-db:
	1. Create a new msdos partition on the added drive on scarface-db
	2. Create a volume group using 100% of the drive
	3. Add a ext4 filesystem to the lvm
	4. Mount that filesystem with a backup of fstab
		---
		- hosts: scarface-db
		  become: yes
		  tasks:
		  - name: Create a new partition on the added drive
		    parted:
				device: /dev/something
				number: 1
				state: present
				part_end: 100%
				label: msdos
				flags: [lvm]
		  - name: Create Volume Groups
		    lvg:
				pvs: /dev/something
				vg: vg_ansible
				state: present
		  - name: create logical volume
		    lvol:
				vg: vg_ansible
				lv: lv_ansible
				size: 100%FREE
				state: present
		  - name: create a filesystem
		    filesystem:
				fstype: ext4
				dev: /dev/mapper/vg_ansible-lv_ansible
		  - name: mount the filesystem
		    mount:
				path: /mnt/test_mount
				src: /dev/mapper/vg_ansible-lv_ansible
				fstype: ext4
				state: mounted
				backup: true

	Working with file content
	Create a playbook that does the following on the webservers
	1. Create a file with the file Modules
	2. Add a line to a new file with copy
	3. Add a line to a file with lineinfile, creating a new file
	4. Replace any line in the 3rd file that ends in "module" with the replace module
	5. Replace any line in the 2nd file that begins with "added" with the lineinfile module.
		---
		- hosts: webservers
		  become: true
		  tasks:
		  	- name: create a file
			  file:
			  	path: /tmp/testFile1
				state: touch
			- name: add line with copy
			  copy:
			  	content: added by copy Modules
				dest: /tmp/testFile2
			- name: add line with lineinfile
			  lineinfile:
			  	path: /tmp/testFile3
				line: added by lineinfile Modules
				create: yes
			- name: replace stuff
			  replace:
			  	path: /tmp/testFile3
				regexp: ".*module$"
				replace: "line replaced by replace module"
			  lineinfile:
			  	path: /tmp/testFile2
				regexp: "^added.*$"
				line: "line replaced by lineinfile module"

	Working with Templates
	Use the ansible adhoc command to find all facts concerning ipv4 with the setup module
		ansible scarfacedb -m setup -a "filter=*ipv4"
	Create a template that shows the hostname, operating system, ipv4 address, 
	ipv6 address, interfaces (joined with a , ), and block devices (joined with a ,)
		Hostname = {{ ansible_hostname}}
		Operating System = {{ ansible_distribution}} {{ ansible_distribution_version}}
		IPV4 Address = {{ ansible_default_ipv4.address }}
		IPV6 Address = {{ ansible_default_ipv6.address }}
		Interfaces = {{ ansible_interfaces|join(, ) }}
		Block Devices = {{ ansible_devices|join(, ) }}
	Create a playbook that does the following:
	1. Push the template to all hosts to /tmp/info.txt
		---
		- hosts: all
		  tasks:
		  	- name: push out info template
			  template:
			  	src: /path/to/template.j2
				dest: /tmp/info.txt

	Working with archives
	Create files on dbservers testFile{1..6} in a new directory called archive
	Create a playbook that does the following on dbservers
	1. Archive files 2 4 and 6 in one playbook in gz format
	2. Archive all files with a wildcard in zip format
	3. Archive the archive directory excluding files 1 2 and 3
	4. unpack each archive in a new directory
		---
		- hosts: dbservers
		  become: true
		  tasks:
		  	- name: archive 2 4 6
			  archive:
			  	path:
					- /archive/testFile2
					- /archive/testFile4
					- /archive/testFile6
				format: gz
				dest: /multiFile.tgz
			- name: Archive wildcard
			  archive:
			  	path: /archive/testFile*
				format: zip
				dest: /test.zip
			- name: Directory exclude
			  archive:
			  	path: /archive
				format: gz
				exclude_path:
					- /archive/testFile1
					- /archive/testFile2
					- /archive/testFile3
				dest: /directory.tgz
			- name: Unpack archives
			  unarchive:
			  	src: /multiFile.tgz
				dest: /multi/
				remote_src: true
			  unarchive:
			  	src: /test.zip
				dest: /unzip/
				remote_src: true
			  unarchive:
			  	src: /directory.tgz
				dest: /directory/
				remote_src: true

	Working with Scheduling
	Create a playbook that does the following on webservers:
	1. Creates a cron job that updates yum on a weekly basis
	2. Uses that at module (install it first), to copy the /var/log/httpd/error_log to /home/wesker in 2 hours. View the at queue (atq) to confirm the job is there.
		---
		- hosts: webservers
		  become: true
		  tasks:
		  	- name: perform a weekly yum update
			  cron:
			  	name: "Weekly yum update"
				minute: "*"
				hour: "2"
				month: "*"
				weekday: "0"
				user: root
				state: present
				job: "yum -y update"
			- name: install at
			  yum:
			  	name: at
				state: latest
			- name: copy httpd error log
				at:
					command: cp /var/log/httpd/error_log /home/wesker
					count: 2
					units: hours
					state: present

	Working with SELinux
	Show the current state of selinux
		sestatus
	Show the current SElinux Boolean values with httpd in the name
		getsebool -a | grep httpd
	Create a new webcontent directory on root
	View its current se context
		ls -dZ /webcontent/
	Create a playbook that does the following on webservers:
	1. Set the selinux state to permissive
	2. Set the httpd_enable_cgi SELinux boolean value to no, persistently
	3. Reverse the changes you made.
	4. Give the webcontent folder the httpd_sys_content_t context. Make sure to restorecon.
		---
		- hosts: webservers
	  	become: true
	  	tasks:
	  		- name: Set to permissive
		  	  selinux:
		  		policy: targeted
				state: permissive
			- name: 
		  	  seboolean:
		  		name: httpd_enable_cgi
				state: no
				persistent: true
			- name: Update the SELinux context on the /webcontent folder
		  	  sefcontext:
		  		target: '/webcontent(/.*)?'
				setype: httpd_sys_content_t
				state: present
			- name: Restore content
		  	  commend: restorecon -irv /webcontent

	Working with Users and Groups
	Create a playbook that does the following for all servers:
	1. Create 2 groups with a loop: Students and Teachers
	2. Create a user, Zach, and add him to the Students group, specifying the /bin/sh shell
	3. Create a user, Kelly, and add her to the Teachers group, UID is 1050
	4. Create a user, Slater, that is part of both groups. UID 1051
	5. Reverse the playbook to remove them all, including their folders.
		for remove, add remove: yes and change state to absent.
		---
		- hosts: all
		  become: true
		  tasks:
		  	- name: create groups
			  group:
			  	name: "{{ item }}"
				state: present
			  loop:
			  	- Students
				- Teachers
			- name: Create Zach
			  user:
			  	name: Zach
				comment: zach morris
				shell: /bin/sh
				groups: Students
				append: yes
				state: present
			- name: Kelly
			  user:
			  	name: Kelly
				comment: kelly kapowski
				uid: 1050
				groups: Teachers
				append: yes
				state: present
			- name: Slater
			  user:
			  	name: Slater
				comment: ac Slater
				uid: 1051
				groups: Students,Teachers
				append: yes
				state: present

Create and Use Templates to Create Customized Config Files - Vids 40-41
	Understanding Variables
		Create a fact file in /etc/ansible/facts.d/ that includes 
		a dictionary with labserver as the group name, type of lab and
		platform of vmware
			[labserver]
			type=lab
			platform=vmware
		Use an adhoc command to use the setup module with a ansible_local filter on any Node
			ansible scarefacedb -m setup -a filter=ansible_local"
		Create a directory in the default ansible folder named vars
			mkdir /etc/ansible/vars
		Create a file called users.yml and input some user names for teachers and Students
			students:
				- zach
				- kelly
				- slater
				- lisa
			teachers:
				- belding
				- bliss
				- tuttle
				- dewey
		Create a new playbook that does the following on all hosts:
			1. Utilize the users.yml file you created
			2. Create the all users in the file, using with_items instead of a loop.
				---
				- hosts: all
			  	become: true
			  	vars_files:
			  		- /etc/ansible/vars/users.yml
			  	tasks:
			  		- name: create users
				  	user:
				  		name: "{{ item }}"
						state: present
				  	with_items: 
				  		- "{{ students }}"
						- "{{ teachers}}"
			3. Alter the file to remove them after it works, 
			    but change to a loop and a flatten(1) filter.
				---
				- hosts: all
			  	become: true
			  	vars_files:
			  		- /etc/ansible/vars/users.yml
			  	tasks:
			  		- name: create users
				  	user:
				  		name: "{{ item }}"
						state: absent
						remove: yes
				  	loop: "{{ [students,teachers]|flatten(1) }}"
	Create and Use Templates
		mkdir /etc/ansible/templates
		Create a Jinja2 file called template.j2 that lists the ansible_hostname,
		admin, http_port, home_dir, ipv4 address, memory 
		used (both real and used) out of the total in mb, 
		the first block device and it's partitions, joined with a new line and a -.

			The admin is {{ admin }}.
			The hostname is {{ ansible_hostname }}.
			The http port is {{ http_port }}.
			The home directory is {{ home_dir }}.
			The ipv4 address is {{ ansible_default_ipv4['address'] }}.
			Current memory usage is {{ ansible_memory_mb['real']['used'] }}mb out of {{ ansible_memory_mb['real']['total'] }}mb.
			The {{ ansible_devices| first }} block device has the following paritions:
				-{{ ansible_devices['sda']['partitions']|join('/n -') }}
		Create a playbook that pushes the template to /tmp/server_info.txt on all servers, making a backup.
		Make sure to add the vars for home_dir, http_port, and admin.
			---
			- hosts: all
			- become: true
			  vars:
			  	home_dir: /home/
				http_port: 80
				admin: wesker
			  tasks:
			  	- name: create the file
				  file:
				  	path: /tmp/server_info.txt
					state: touch
				- name: push the template
				  template:
				  	src: /etc/ansible/templates/template.j2
					dest: /tmp/server_info.txt
					backup: yes

Create and Work with Roles - Vids 42-44
	Create the ansible roles directory in /etc/ansible/roles, creating a "apache" role with the standard file structure.
		Inside the roles folder: ansible-galaxy init apache
	Deploy the following in the tasks main.yml: (Vars for the content directory will be apache_content_dir, index.html.j2 and httpd.conf.j2 is the jinja2 file for templates,)
	1. Create the webcontent directory with 0755 permissions
	2. Set and restore the selinux context to httpd_sys_content_t
	3. Install apache
	4. Deploy httpd.conf, notify to "restart apache"
	5. Deploy index.html to apache_content_dir/index.html
	6. start and enable the service
		---
		- name: create webcontent directory\
		  file:
		  	path: "{{ apache_content_dir }}"
			state: directory
			mode: '0755'
		- name: set secontext
		  sefcontext:
		  	target: '{{ apache_content_dir }}(/.*)?'
			setype: httpd_sys_content_t
			state: present
		- name: run restorecon
		  command: restorecon -irv {{ apache_content_dir }}
		- name: install apache
		  yum:
		  	name: httpd
			state: latest
		- name: deploy httpd.conf
		  template:
		  	src: httpd.conf.j2
			dest: /etc/httpd/conf/httpd.conf
			backup: yes
			notify: "restart apache"
		- name: depolyt index.html
		  template:
		  	src: index.html.j2
			dest: "{{ apache_content_dir }}/index.html"
			backup: yes
		- name: Start and enable httpd
		  service:
		  	name: httpd
			enable: true
			state: started

	In the defaults main.yml, set the following:
	1. apache_content_dir to /webcontent
	2. apache_http_port to 8080
	3. apache_admin to root
		---
		apache_content_dir: /webcontent
		apache_http_port: 8080
		apache_admin: root

	In the main.yml for handlers, create a handler that listens for "restart apache"
		---
		- name: restart web servers
		  service:
		  	name: httpd
			state: restarted
		  listen: "restart apache"
	
	Create a playbook in the playbooks folder called role.yml to run the apache role
		---
		- hosts: webservers
		  become: yes
		  roles:
		  	- apache

	Run that playbook
		ansible-playbook role.yml

	Use ansible-galaxy to search for a postgresql role from geerlingguy and install it
		ansible-galaxy search postgresql --author geerlingguy
		ansible-galaxy install geerlingguy.postgresql
	List the roles currently installed
		ansible-galaxy list
	Remove the postgresql role you installed
		ansible-galaxy remove geerlingguy.postgresql


Protect Sensitive Data in Playbooks with Ansible Vault - Vids 46-47

Ansible Documentation - Vids 48-49


