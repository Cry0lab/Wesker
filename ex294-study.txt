Basic RHCSA Skills - Vids 3-11
	Essential Tools
		tar a file
			tar -cvf archive.tar file1 file2
		extract a tar
			tar -xvf archive.tar
	Operate Running Systems
		Interrupt Boot and Change Root Password
			Press e during boot
			Go to the end of the "linux" line and remove ro crash and add ro.break enforcing=0
			Start the system with CTRL+x
			Remount the root filesystem
				mount -o remount,rw /sysroot
			cd /sysroot
			passwd
			Enable SELinux relabeling
				touch /.autorelabel
			exit
		List active processes
			ps -ef
	Local Storage
		List current block devices and partitions
			lsblk
		Create a DOS partition
			fdisk /dev/device_name
			Show the help
				m
			print partition table
				p
			Create a DOS parition table
				o
			Create new primary partition
				n
			List partition types
				l
			Use the Linux LVM type
				8e
			Write the table to disk
				w
		Create a new LVM Logical Volume
			Create a physical volume
				pvcreate /dev/device_name
			list physical volumes
				pvs
			Create a volume group
				vgcreate vol_group /dev/device_name
			list volume groups
				vgs
			create logical volume
				lvcreate -L 1G<size goes here> -n new_lv vol_group
			list logical volumes
				lvs
		Create file system on the new lvs
			mkfs.ext4 /path/to/lv
		Mount the file system
			mount /path/to/lv /path/to/dir
		Mount it persistently
			list the UUID
				blkid
			add to /etc/fstab
				UUID=UUID_NUMBER /mount/point fs_type defaults 0 0
		Extend the Logical Volume
			Increase the underlying logical volume
				lvextend -L +500M /dev/vol_group/log_vol
			Unmount it
				umount /path/to/mount
			resize file system
				resize2fs /dev/vol_grp/log_vol
			Mount it again
				mount -a
			Check your work
				df -h
		Mount an nfs file system from Scarecrow
			yum install nfs-utils
			systemctl start rpcbind
			showmount -e SERVER_IP
			mount persistently
				SERVERIP:/mnt/nfs	/mnt/DIRECTORY	nfs	defaults 0 0
		Delete the LVM Logical Volume you just made
			Delete logical volume
				lvremore vol_group/new_lv
			Delete volume group
				vgremove vol_group
			Delete physical volume
				pvremove /dev/device_name
	Deploy-Configure-Maintain
		List all scheduled jobs
			atq
		Configure time service client with chrony
			yum install chrony
			systemctl enable --now chronyd
			vi /etc/chrony.conf and put in NTP server
			systemctl restart chronyd
	Users and Groups
		Create a new user
			useradd username
		Modify the user to add the wheel group
			usermod -aG wheel username
		Set the user password
			passwd username
		Set expiration on the user's password
			chage
		Delete the user
			userdel username
		Create a new group
			groupadd groupname
		Delete a group
			groupdel groupname
	Security
		Add a firewalld port rule for httpd
			firewall-cmd --add-service=http --permanent
			firewall-cmd --add-port=443 --permanent
			firewall-cmd --add-port=8080 --permanent
			firewall-cmd --reload
			firewall-cmd --list-all
		SELinux
			See what mode you're in
				getenforce
			Set mode to permissive or enforcing
				setenforce 0 | 1
			list booleans
				getsebool -a
			list SELinux contexts
				semanage fcontext -l
			view context on file or process
				ls -Z | ps -axZ
			restore default contexts
				restorecon -R /directory

Understand Core Components of Ansible - Vids 12-17
	Inventories
		Create an inventory with 2 seperate groups, dbservers and webservers, and one ungrouped host
			vim /etc/ansible/hosts
				server1.cryolab.tech

				[webservers]
				server2.cryolab.tech
				server3.cryolab.tech

				[dbservers]
				server[4:6].cryolab.tech
	Config Files
		list the currect ansible configs
			ansible-config list
			ansible-config view

Install and Configure an Ansible Control Node - Vids 18-20
	Create a new host file and make it the default for ansible in /etc/ansible/inventory/inv.ini; add the roles path to be /etc/ansible/roles
		vim /etc/ansible/ansible.cfg
			[defaults]
			inventory = /etc/ansible/inventory/inv.ini
			roles_path = /etc/ansible/roles
	Create an inline variable in the host file for scarface.cryolab.tech to also be scarface
		scarface ansible_host=scarface.cryolab.tech
	Create a host_vars file to hold the variable instead
		vim /etc/ansible/inventory/host_vars/scarface
			scarface ansible_host=scarface.cryolab.tech

Script Administration Tasks - Vids 23-24
	Use an adhoc ansible command to ping the endpoint
		ansible scarface -m ping
	Use an adhoc command to copy a file to the Node
		ansible scarface -m copy -a "src=/file dest=/tmp"
	Use an adhoc command to ls the root directory
		ansible scarface -a "ls /"
	Write a bash script that uses adhoc commands to installs and enables httpd, ls the root directory, and pings the host
		#!/bin/bash

		ansible scarface -b -m yum -a "name=httpd state=latest"
		ansible scarface -b -m service -a "name=httpd state=started enabled=yes"

		ansible scarface -b -a "ls /"

		ansible scarface -m ping

Create Ansible Plays and Playbooks - Vids 25-29
	Create a playbook that creates a file and displays a debug message that shows the output of that creation. 
	Then, add a line to the file you created with the UID of the file and the gid of the file.
		---
		- hosts: scarface
		  tasks:
		  	- name: create a file
			  file:
			  	path: /tmp/testFile
				state: touch
			  register: var
			- name: display debug message
			  debug: msg="Register output it {{ var }}"
			- name: edit file
			  lineinfile:
			  	path: /tmp/testFile
				line: "The uid is {{ var.uid}} and the gid is {{ var.gid }}"
	
	Create a playbook that installs httpd, then replace the line with ServerAdmin to be redhood, making sure to make a backup. 
	If it works, use a handler to restart apache
		---
		- hosts: scarface
		  tasks:
		  	- name: install httpd
			  yum:
			  	name: httpd
				state: latest
			  service:
			  	name: httpd
				state: started
				enabled: yes
			- name update httpd.conf
			  replace:
			  	path: /etc/httpd/conf/httpd.conf
				regexp: '^ServerAdmin.*$'
				replace: 'ServerAdmin redhood@localhost'
				backup: yes
			  notify: "restart web server"
		  handlers:
		  	- name: "restart apache"
			  service:
			  	name: httpd
				state: restarted
			  listen: "restart web server"
	
	Create a playbook that targets all servers and copies a file, but use a when statement so it only runs if the hostname is scarface
		---
		- hosts: all
		  become: true
		  tasks:
		  	- name: copy file
			  copy:
			  	src: /path/to/file
				dest: /path/to/file
			  when: ansible_hostname == "scarface"
	
	Create a playbook that uses a loop to creates 3 users into the wheel group
		---
		- hosts: scarface
		  become: true
		  tasks:
		  	- name: create a list of users
			  user:
			  	name: "{{ item }}
				state: present
				group: wheel
			  loop:
			  	- name1
				- name2
				- name3
	
	Create a playbook that copies a non-existent file from the target host, but ignores errors
		---
		- hosts: scarface
		  become: true
		  tasks:
			- name: copy fake file
			  fetch:
				src: /tmp/fakeFile
				dest: /tmp
			  ignore_errors: true

	Create a playbook that copies a non-existent file from the target host, but use a block to display a custom error message with the hostname of the host that failed. Include a message that always displays when the playbook is finished.
		---
		- hosts: scarface
		  become: true
		  tasks:
			- name: fetch fake file
			  block:
				- fetch:
					src: /tmp/fakeFile
					dest: /tmp
			  rescue:
				- debug:
					msg: "The file doesn't exist on {{ ansible_hostname }}."
			  always:
				- debug:
					msg: "Playbook is finished!"

	Create a playbook that does the following:
		On the webservers:
		1. Installs apache
		2. Creates users will and myles in the apache group using a loop
		3. Create an index.html on the webservers using a simple template and 644 permissions ("This is the index.html on {{ ansible_hostname }})
		4. Start and enable apache, reloading the daemon
		On the dbservers
		1. Install postgresql
		2. Initialize the cluster (/usr/bin/postgresql-setup --initdb)
		3. Creates users corey and aaron in the postgres group using a loop
		4. Start and enable postgresql
			---
			- hosts: webservers
			  become: true
			  tasks:
			  	- name: install apache
				  yum:
				  	name: httpd
					state: latest
				- name: create users for apache
				  user:
				  	name: {{ item }}
					groups: apache
				  loop:
				  	- will
					- myles
				- name: create index.html
				  template:
				  	src: /home/wesker/index.j2
					dest: /var/www/html/index.html
					owner: apache
					group: apache
					mode: 0644
				- name: start and enable httpd
				  systemd:
				  	name: httpd
					state: started
					daemon_reload: true
					enabled: true
			- hosts: dbservers
			  become: true
			  tasks:
			  	- name: install postgresql
				  yum:
				  	name: postgresql
					state: latest
				- name: Initialize dbservers
				  command: /usr/bin/postgresql-setup --initdb
				- name: Create users
				  user:
				  	name: {{ item }}
					group: postgres
				  loop:
				  	- corey
					- aaron
				- name: start and enable postgres
				  systemd:
				  	name: postgresql
					state: started
					enabled: true

Use Ansible Modules for System Adminstration Tasks - Vids 30-39
	Working with Yum
	Create a playbook that does the following:
	1. Installs multiple packages in the same playbook
	2. Install an rpm from a remote repo
	3. Install an rpm from a local file
	4. Remove the packages you just installed
	5. Add the epel repo
	6. remove the repo
		---
		- hosts: all
		  become: true
		  tasks:
		  	- name: Install multiple packages
			  yum:
			  	name: 
					- nmap
					- nfs-utils
				state: latest
			- name: install a repo from a remote repo
			  yum:
			  	name: http://website.com/path/to/rpm
				state: present
			- name: Install from a local file
			  yum:
			  	name: /path/to/rpm
				state: present
			- name: remove packages
			  yum:
			  name:
			  	- nmap
				- nfs-utils
			  state: absent
			- name: Add epel repo
			  yum_repository:
			  	name: epel
				description: EPEL YUM repo
				baseurl: https://a;slkdf;alksdjf
			- name: remove epel repo
			  yum_repository:
			  	name: epel
				file: epel
				state: absent

	Working with the firewall
	Create a playbook that does the following to the webservers:
	1. Add the http and https service to the firewall, immedaitely and permanantly to the public zone
	2. Add the ports 8080-8084
	3. Use a rich rule to forward port 443 to 8443
	4. Change the playbook to disable those rules
		---
		- hosts: webservers
		  become: true
		  tasks:
		  	- name: add http and https
			  firewalld:
			  	zone: public
				service: {{ item }}
				permanent: true
				immediate: true
				state: enabled
			  loop:
			  	- http
				- https
			- name: add 8080
			  firewalld:
			  	zone: public
				port: 8080-8084/tcp
				permanent: true
				immediate: true
				state: enabled
			- name: Forward port 443 to 8443
			  firewalld:
			  	zone: public
				rich_rule: rule family=ipv4 forward-port port=443 protocol=tcp to-port=8443
				permanent: true
				immediate: true
				state: enabled

Create and Use Templates to Create Customized Config Files - Vids 40-41

Create and Work with Roles - Vids 42-44

Managing Parallelism - Vids 45

Protect Sensitive Data in Playbooks with Ansible Vault - Vids 46-47

Ansible Documentation - Vids 48-49


